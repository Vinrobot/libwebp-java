// Generated by jextract

package com.google.libwebp.foreign.jdk21;

import java.lang.invoke.MethodHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class LibWebP  {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfInt C_LONG = JAVA_INT;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    public static MethodHandle WebPMalloc$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$1,"WebPMalloc");
    }
    /**
     * {@snippet :
     * void* WebPMalloc(size_t size);
     * }
     */
    public static MemorySegment WebPMalloc(long size) {
        var mh$ = WebPMalloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WebPFree$MH() {
        return RuntimeHelper.requireNonNull(constants$0.const$3,"WebPFree");
    }
    /**
     * {@snippet :
     * void WebPFree(void* ptr);
     * }
     */
    public static void WebPFree(MemorySegment ptr) {
        var mh$ = WebPFree$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WebPAnimDecoderNewInternal$MH() {
        return RuntimeHelper.requireNonNull(constants$1.const$2,"WebPAnimDecoderNewInternal");
    }
    /**
     * {@snippet :
     * WebPAnimDecoder* WebPAnimDecoderNewInternal(const WebPData*, const WebPAnimDecoderOptions*, int);
     * }
     */
    public static MemorySegment WebPAnimDecoderNewInternal(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = WebPAnimDecoderNewInternal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WebPAnimDecoderGetInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$4,"WebPAnimDecoderGetInfo");
    }
    /**
     * {@snippet :
     * int WebPAnimDecoderGetInfo(const WebPAnimDecoder* dec, WebPAnimInfo* info);
     * }
     */
    public static int WebPAnimDecoderGetInfo(MemorySegment dec, MemorySegment info) {
        var mh$ = WebPAnimDecoderGetInfo$MH();
        try {
            return (int)mh$.invokeExact(dec, info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WebPAnimDecoderGetNext$MH() {
        return RuntimeHelper.requireNonNull(constants$2.const$6,"WebPAnimDecoderGetNext");
    }
    /**
     * {@snippet :
     * int WebPAnimDecoderGetNext(WebPAnimDecoder* dec, uint8_t** buf, int* timestamp);
     * }
     */
    public static int WebPAnimDecoderGetNext(MemorySegment dec, MemorySegment buf, MemorySegment timestamp) {
        var mh$ = WebPAnimDecoderGetNext$MH();
        try {
            return (int)mh$.invokeExact(dec, buf, timestamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WebPAnimDecoderHasMoreFrames$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$1,"WebPAnimDecoderHasMoreFrames");
    }
    /**
     * {@snippet :
     * int WebPAnimDecoderHasMoreFrames(const WebPAnimDecoder* dec);
     * }
     */
    public static int WebPAnimDecoderHasMoreFrames(MemorySegment dec) {
        var mh$ = WebPAnimDecoderHasMoreFrames$MH();
        try {
            return (int)mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WebPAnimDecoderDelete$MH() {
        return RuntimeHelper.requireNonNull(constants$3.const$2,"WebPAnimDecoderDelete");
    }
    /**
     * {@snippet :
     * void WebPAnimDecoderDelete(WebPAnimDecoder* dec);
     * }
     */
    public static void WebPAnimDecoderDelete(MemorySegment dec) {
        var mh$ = WebPAnimDecoderDelete$MH();
        try {
            mh$.invokeExact(dec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$3.const$3;
    }
}


